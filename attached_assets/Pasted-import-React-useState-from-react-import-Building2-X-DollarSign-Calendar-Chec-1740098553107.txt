import React, { useState } from 'react';
import {
  Building2,
  X,
  DollarSign,
  Calendar,
  CheckCircle,
  Info,
  ArrowRight
} from 'lucide-react';

const AddPropertyForm = ({ onClose, onSubmit }) => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    // Property Details
    name: '',
    type: '',
    address: '',
    unit: '',
    rent: '',
    availableDate: '',
    description: '',
    
    // Requirements
    creditScore: '650',
    incomeMultiplier: '3',
    noEvictions: true,
    cleanHistory: true,
    
    // Additional Settings
    petPolicy: 'no',
    petDeposit: '',
    leaseLength: '12',
    securityDeposit: ''
  });

  const totalSteps = 3;

  const StepIndicator = () => (
    <div className="flex items-center justify-center mb-8">
      {[1, 2, 3].map((num) => (
        <div key={num} className="flex items-center">
          <div className={`
            w-8 h-8 rounded-full flex items-center justify-center
            ${step >= num ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'}
          `}>
            {num}
          </div>
          {num < totalSteps && (
            <div className={`w-16 h-1 ${step > num ? 'bg-blue-600' : 'bg-gray-200'}`} />
          )}
        </div>
      ))}
    </div>
  );

  const PropertyDetails = () => (
    <div className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Property Name
          </label>
          <input
            type="text"
            className="w-full p-2 border rounded-lg"
            placeholder="e.g., Oak Ridge Apartments"
            value={formData.name}
            onChange={(e) => setFormData({...formData, name: e.target.value})}
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Property Type
          </label>
          <select
            className="w-full p-2 border rounded-lg"
            value={formData.type}
            onChange={(e) => setFormData({...formData, type: e.target.value})}
          >
            <option value="">Select type</option>
            <option value="apartment">Apartment</option>
            <option value="house">House</option>
            <option value="condo">Condo</option>
            <option value="townhouse">Townhouse</option>
          </select>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Street Address
        </label>
        <input
          type="text"
          className="w-full p-2 border rounded-lg"
          placeholder="Enter street address"
          value={formData.address}
          onChange={(e) => setFormData({...formData, address: e.target.value})}
        />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Unit Number (Optional)
          </label>
          <input
            type="text"
            className="w-full p-2 border rounded-lg"
            placeholder="e.g., Apt 4B"
            value={formData.unit}
            onChange={(e) => setFormData({...formData, unit: e.target.value})}
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Monthly Rent
          </label>
          <div className="relative">
            <DollarSign className="w-4 h-4 text-gray-400 absolute left-3 top-1/2 -translate-y-1/2" />
            <input
              type="number"
              className="w-full pl-9 p-2 border rounded-lg"
              placeholder="Enter amount"
              value={formData.rent}
              onChange={(e) => setFormData({...formData, rent: e.target.value})}
            />
          </div>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Available Date
        </label>
        <input
          type="date"
          className="w-full p-2 border rounded-lg"
          value={formData.availableDate}
          onChange={(e) => setFormData({...formData, availableDate: e.target.value})}
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Property Description
        </label>
        <textarea
          className="w-full p-2 border rounded-lg"
          rows="3"
          placeholder="Enter property description..."
          value={formData.description}
          onChange={(e) => setFormData({...formData, description: e.target.value})}
        />
      </div>
    </div>
  );

  const RequirementsSection = () => (
    <div className="space-y-6">
      <div className="bg-blue-50 border border-blue-100 rounded-lg p-4 mb-6">
        <div className="flex gap-2">
          <Info className="w-5 h-5 text-blue-600 flex-shrink-0 mt-1" />
          <p className="text-sm text-gray-600">
            Set your screening requirements. These will be used to automatically pre-qualify applicants.
          </p>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Minimum Credit Score
        </label>
        <select
          className="w-full p-2 border rounded-lg"
          value={formData.creditScore}
          onChange={(e) => setFormData({...formData, creditScore: e.target.value})}
        >
          <option value="600">600+</option>
          <option value="650">650+</option>
          <option value="700">700+</option>
          <option value="750">750+</option>
        </select>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Minimum Income Requirement
        </label>
        <select
          className="w-full p-2 border rounded-lg"
          value={formData.incomeMultiplier}
          onChange={(e) => setFormData({...formData, incomeMultiplier: e.target.value})}
        >
          <option value="2.5">2.5× monthly rent</option>
          <option value="3">3× monthly rent</option>
          <option value="3.5">3.5× monthly rent</option>
          <option value="4">4× monthly rent</option>
        </select>
      </div>

      <div className="space-y-3">
        <label className="flex items-center">
          <input
            type="checkbox"
            className="rounded border-gray-300 text-blue-600 mr-2"
            checked={formData.noEvictions}
            onChange={(e) => setFormData({...formData, noEvictions: e.target.checked})}
          />
          <span>No prior evictions</span>
        </label>
        <label className="flex items-center">
          <input
            type="checkbox"
            className="rounded border-gray-300 text-blue-600 mr-2"
            checked={formData.cleanHistory}
            onChange={(e) => setFormData({...formData, cleanHistory: e.target.checked})}
          />
          <span>Clean rental payment history</span>
        </label>
      </div>
    </div>
  );

  const AdditionalSettings = () => (
    <div className="space-y-6">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Pet Policy
        </label>
        <select
          className="w-full p-2 border rounded-lg"
          value={formData.petPolicy}
          onChange={(e) => setFormData({...formData, petPolicy: e.target.value})}
        >
          <option value="no">No pets allowed</option>
          <option value="cats">Cats only</option>
          <option value="dogs">Dogs only</option>
          <option value="both">Both cats and dogs allowed</option>
        </select>
      </div>

      {formData.petPolicy !== 'no' && (
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Pet Deposit
          </label>
          <div className="relative">
            <DollarSign className="w-4 h-4 text-gray-400 absolute left-3 top-1/2 -translate-y-1/2" />
            <input
              type="number"
              className="w-full pl-9 p-2 border rounded-lg"
              placeholder="Enter amount"
              value={formData.petDeposit}
              onChange={(e) => setFormData({...formData, petDeposit: e.target.value})}
            />
          </div>
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Minimum Lease Length (months)
        </label>
        <select
          className="w-full p-2 border rounded-lg"
          value={formData.leaseLength}
          onChange={(e) => setFormData({...formData, leaseLength: e.target.value})}
        >
          <option value="6">6 months</option>
          <option value="12">12 months</option>
          <option value="18">18 months</option>
          <option value="24">24 months</option>
        </select>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Security Deposit
        </label>
        <div className="relative">
          <DollarSign className="w-4 h-4 text-gray-400 absolute left-3 top-1/2 -translate-y-1/2" />
          <input
            type="number"
            className="w-full pl-9 p-2 border rounded-lg"
            placeholder="Enter amount"
            value={formData.securityDeposit}
            onChange={(e) => setFormData({...formData, securityDeposit: e.target.value})}
          />
        </div>
      </div>
    </div>
  );

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg w-full max-w-3xl">
        {/* Info Header */}
        <div className="p-6 bg-blue-50 border-b border-blue-100">
          <div className="flex items-start gap-3 mb-4">
            <Info className="w-5 h-5 text-blue-600 mt-1" />
            <div>
              <h2 className="text-lg font-semibold mb-1">Create a Property Screening Page</h2>
              <p className="text-gray-600">Set up your property details and requirements to start receiving qualified RentCard applications.</p>
            </div>
          </div>
          
          <div className="grid grid-cols-3 gap-4 mt-4">
            <div className="flex gap-2">
              <div className="w-6 h-6 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center flex-shrink-0">
                1
              </div>
              <p className="text-sm">Enter property details and requirements</p>
            </div>
            <div className="flex gap-2">
              <div className="w-6 h-6 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center flex-shrink-0">
                2
              </div>
              <p className="text-sm">Customize your screening criteria</p>
            </div>
            <div className="flex gap-2">
              <div className="w-6 h-6 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center flex-shrink-0">
                3
              </div>
              <p className="text-sm">Get your unique screening page link</p>
            </div>
          </div>
        </div>
        {/* Header */}
        <div className="flex justify-between items-center p-6 border-b">
          <div className="flex items-center gap-3">
            <Building2 className="w-6 h-6 text-blue-600" />
            <h2 className="text-xl font-semibold">Add New Property</h2>
          </div>
          <button onClick={onClose}>
            <X className="w-6 h-6 text-gray-500" />
          </button>
        </div>

        {/* Form Content */}
        <div className="p-6">
          <StepIndicator />
          
          {step === 1 && (
            <>
              <h3 className="font-medium mb-4">Property Details</h3>
              <PropertyDetails />
            </>
          )}
          
          {step === 2 && (
            <>
              <h3 className="font-medium mb-4">Screening Requirements</h3>
              <RequirementsSection />
            </>
          )}
          
          {step === 3 && (
            <>
              <h3 className="font-medium mb-4">Additional Settings</h3>
              <AdditionalSettings />
            </>
          )}
        </div>

        {/* Footer */}
        <div className="flex justify-between p-6 border-t bg-gray-50">
          <div className="flex gap-3">
            {step > 1 ? (
              <button
                onClick={() => setStep(step - 1)}
                className="px-4 py-2 border rounded-lg hover:bg-gray-50"
              >
                Back
              </button>
            ) : (
              <button
                onClick={onClose}
                className="px-4 py-2 border rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
            )}
          </div>
          
          <div className="flex gap-3">
            {step < totalSteps ? (
              <button
                onClick={() => setStep(step + 1)}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2"
              >
                Next
                <ArrowRight className="w-4 h-4" />
              </button>
            ) : (
              <button
                onClick={() => onSubmit(formData)}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2"
              >
                Create Property
                <ArrowRight className="w-4 h-4" />
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AddPropertyForm;